name: 'TruxScapper: Build, Test & Deploy'

on:
  push:
    branches: [ "**" ]

jobs:
  try-deliver:
    name: '.NET 9 Build, Test & Deploy'
    runs-on: 'ubuntu-latest'

    steps:
      - name: Get source code
        uses: actions/checkout@v3
        
      - name: Save GitHub Event Payload
        run: |
          cat <<EOF > github_event.json
          ${{ toJson(github.event) }}
          EOF

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 9.0.x
      
      - name: Install Railway CLI
        if: github.ref_name == 'dev' && success()
        run: npm i -g @railway/cli

      - name: Build and Publish
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        shell: pwsh
        run: |
          try {
            dotnet restore
          } catch {
            $_.Exception.ToString() | Out-File -FilePath "./errors.log" -Append
            echo "Restore failed"
            exit 1
          }
          
          try {
            dotnet publish ./WebDemo/ -c Release -o ./publish --no-restore
            echo "Build and publish completed successfully"            
          } catch {
            $_.Exception.ToString() | Out-File -FilePath "./errors.log" -Append
            echo "Build failed"
            exit 1
          }

          try {      
            Set-Location ./publish
            railway up --ci --service=trux-scrapper           
          } catch {
            $_.Exception.ToString() | Out-File -FilePath "./errors.log" -Append
            echo "Deploy failed"
            exit 1
          }

      - name: Notify Discord
        if: always()
        shell: pwsh
        run: |
          # Load the event payload as JSON
          $githubEvent = @{}          
          if(Test-Path ./github_event.json) {
            $githubEvent = Get-Content -Path ./github_event.json -Raw | ConvertFrom-Json
          }

          # Load errors from errors.log
          $errors = ""
          if (Test-Path "./errors.log") {
            echo "Found errors log file"
            $errors = $( Get-Content -Path "./errors.log" )
          }

          echo "These are the errors: [$errors]"

          function releaseTrimming ([string] $text) 
          {
            return $text -replace '^\[Release\]\s*', '' -replace '"', '\"'
          }

          $headCommit = releaseTrimming $githubEvent.head_commit.message
          $commits = [System.Collections.Stack]::new( $githubEvent.commits )
          $failed = '${{ job.status }}' -eq 'failure'

          #echo $commits

          $status, $icon, $message = if ($failed -or $errors) {
            'failed', 'ðŸ’¥', $errors
          } elseif ('${{ job.status }}' -eq 'success') {
            'successfully completed', 'âœ…', $headCommit
          } else {
            'cancelled', 'â›”', 'User aborted the action'
          }

          $message = @"
          ðŸš€ **${{ github.workflow }}** \#${{ github.run_number }} 
          $icon Build $status 
          ðŸ‘¤ **Triggered by:** [${{ github.triggering_actor }}](https://github.com/${{ github.triggering_actor }})
          ðŸŒ¿ **Branch:** ${{ github.ref_name }}
          ðŸ”— **Change:** *[$( $githubEvent.head_commit.id.Substring(0,8) )]($($githubEvent.head_commit.url))*
  
          **$(releaseTrimming $githubEvent.head_commit.message)**$(if($commits.Count -gt 1 ) { "
          
          $([string]::Join("
          ", $( $commits | 
          Select -Skip 1 | 
          ForEach-Object { 
              "ðŸ”¹[$($_.id.Substring(0,8))]($($_.url)): $(releaseTrimming $_.message)
            by [$($_.author.username)](https://github.com/$($_.author.username))"
          })))"
          })$( if($errors) { "
          
          ``````
          $($errors.Trim())
          ``````" } )
          "@
  
          Write-Host $message

          $webhookUrl = "${{ secrets.DISCORD_URL_WEBHOOK }}"
          $commitSha = 'Custom SHA1'
          $color = if (-not $failed) { 65280 } else { 16711680 }
          $payload = @{
              content = "## Deployment of Trux Scrapper to Railway completed. 
          ### Status: $status"
              embeds = @(
                  @{
                      title = "Deployment Notification"
                      description = $message
                  }
              )
          } | ConvertTo-Json -Depth 10
          Invoke-WebRequest -Uri $webhookUrl -Method POST -Body $payload -ContentType "application/json"
